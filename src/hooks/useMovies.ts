// hooks/useMovies.ts - Custom hook ƒë·ªÉ qu·∫£n l√Ω state phim

import { useState, useEffect, useCallback } from 'react';
import { Movie } from '../types/movie';
import movieService from '../services/api/movieService';

interface UseMoviesState {
  // D·ªØ li·ªáu phim
  newMovies: Movie[];
  singleMovies: Movie[];
  seriesMovies: Movie[];
  animeMovies: Movie[];
  usukMovies: Movie[];
  koreanMovies: Movie[];
  featuredMovie: Movie | null;
  
  // Tr·∫°ng th√°i loading
  loading: boolean;
  refreshing: boolean;
  
  // L·ªói
  error: string | null;
  
  // H√†m actions
  loadMoviesData: () => Promise<void>;
  onRefresh: () => Promise<void>;
}

/**
 * Custom hook ƒë·ªÉ qu·∫£n l√Ω vi·ªác load v√† refresh d·ªØ li·ªáu phim
 * @returns Object ch·ª©a state v√† functions
 */
export const useMovies = (): UseMoviesState => {
  // State cho c√°c lo·∫°i phim
  const [newMovies, setNewMovies] = useState<Movie[]>([]);
  const [singleMovies, setSingleMovies] = useState<Movie[]>([]);
  const [seriesMovies, setSeriesMovies] = useState<Movie[]>([]);
  const [animeMovies, setAnimeMovies] = useState<Movie[]>([]);
  const [usukMovies, setUsukMovies] = useState<Movie[]>([]);
  const [koreanMovies, setKoreanMovies] = useState<Movie[]>([]);
  const [featuredMovie, setFeaturedMovie] = useState<Movie | null>(null);
  
  // State cho UI
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  /**
   * Load t·∫•t c·∫£ d·ªØ li·ªáu phim t·ª´ API
   */
  const loadMoviesData = useCallback(async (): Promise<void> => {
    try {
      console.log('üîÑ B·∫Øt ƒë·∫ßu load d·ªØ li·ªáu phim...');
      setError(null);
      
      // G·ªçi t·∫•t c·∫£ API song song ƒë·ªÉ tƒÉng performance
      const [
        newMoviesData,
        singleMoviesData, 
        seriesMoviesData,
        animeMoviesData,
        usukMoviesData,
        koreanMoviesData
      ] = await Promise.all([
        movieService.getNewMovies(),
        movieService.getSingleMovies(),
        movieService.getSeriesMovies(), 
        movieService.getAnimeMovies(),
        movieService.getUSUKMovies(),
        movieService.getKoreanMovies()
      ]);

      // C·∫≠p nh·∫≠t state
      setNewMovies(newMoviesData);
      setSingleMovies(singleMoviesData);
      setSeriesMovies(seriesMoviesData);
      setAnimeMovies(animeMoviesData);
      setUsukMovies(usukMoviesData);
      setKoreanMovies(koreanMoviesData);
      
      // Set featured movie t·ª´ phim m·ªõi nh·∫•t
      if (newMoviesData.length > 0) {
        setFeaturedMovie(newMoviesData[0]);
      }
      
      console.log('‚úÖ Load d·ªØ li·ªáu phim th√†nh c√¥ng');
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      console.error('‚ùå L·ªói khi load d·ªØ li·ªáu phim:', errorMessage);
      setError(errorMessage);
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * Refresh d·ªØ li·ªáu phim
   */
  const onRefresh = useCallback(async (): Promise<void> => {
    setRefreshing(true);
    await loadMoviesData();
    setRefreshing(false);
  }, [loadMoviesData]);

  // Load d·ªØ li·ªáu khi component mount
  useEffect(() => {
    loadMoviesData();
  }, [loadMoviesData]);

  return {
    // Data
    newMovies,
    singleMovies,
    seriesMovies,
    animeMovies,
    usukMovies,
    koreanMovies,
    featuredMovie,
    
    // UI State
    loading,
    refreshing,
    error,
    
    // Actions
    loadMoviesData,
    onRefresh,
  };
};